extends layout

block content
  .row-fluid
    .span2
      h1 Stickers
    .span3.offset7
      button#addStickerBtn.btn(role="button") 
        i.icon-pencil
        |  New Sticker
 

  #editingStickerModal.modal.hide.fade(tabindex="-1", role="dialog", aria-labelledby="New Sticker", aria-hidden="true", data-bind="with: editingSticker")
    form(method="post", action="/sticker")
      .modal-header
        button.close(type="button", data-dismiss="modal", aria-hidden="true") ×
        h3(data-bind="text: headerLabel()")
      .modal-body
        input.title(name="title", placeholder="write the sticker title here", data-bind="value: title", required)
        textarea.body(rows="15", name="body", placeholder="write the sticker dody here. Markdown format is supported.", data-bind="value: body")
        .preview.body(data-bind="html: bodyHtml") 
      .modal-footer
        button.btn(data-dismiss="modal", aria-hidden="true") Close
        #saveStickerBtn.button.btn.btn-primary(data-bind="text: saveButtonLabel()")
  
  
  #viewingStickerModal.modal.hide.fade(tabindex="-1", role="dialog", aria-labelledby="View Sticker", aria-hidden="true", data-bind="with: viewingSticker")
    .modal-header
      button.close(type="button", data-dismiss="modal", aria-hidden="true") ×
      h4.title(data-bind="text: title")
    .modal-body
      .body(data-bind="html: bodyHtml") 
    .modal-footer
      button.btn(data-dismiss="modal", aria-hidden="true") Close
      #editStickerBtn.button.btn.btn-primary Edit

  
  

  #lanes(data-bind="foreach: lanes")
    .lane(data-bind="style:{width: 100/($root.lanes().length + 1) + '%'}, attr:{id: title}", ondragover="allowDrop(event)", ondrop="drop(event)")
      .laneTitle(data-bind="text: title")
      .stickers(data-bind="foreach: stickers")
        .sticker(data-bind="attr:{id: _id}", draggable="true", ondragstart="drag(event)")
          .sticker-id(data-bind="text: _id")
          .sticker-title(data-bind="text: title")

  script(type='text/javascript')
    function allowDrop(ev)
    {
      ev.preventDefault();
    }

    function drag(ev)
    {
      ev.dataTransfer.setData("Text",ev.target.id);
    }

    function drop(ev)
    {
      ev.preventDefault();
      var stickerId=ev.dataTransfer.getData("Text");
      var newStatus = ev.target.id;
      viewModel.changeStatus(stickerId, newStatus);
    }
    $(function(){
      window.viewModel = new stickers.Wall();
      ko.applyBindings(viewModel);
      viewModel.startPull();

      $("#addStickerBtn").click(function(){
        viewModel.setNewSticker();
        $("#editingStickerModal").modal("show");
        $("#saveStickerBtn").hide();
      });

      $("#saveStickerBtn").live('click', function(){
        viewModel.saveEditingSticker();
        $("#editingStickerModal").modal("hide");
      });

      $("#editingStickerModal .title").live('keyup', function(){
        if($("#editingStickerModal .title").val())
          $("#saveStickerBtn").show();
        else
          $("#saveStickerBtn").hide();

      });

      $(".sticker").live('click', function(){
        var id = $(this).attr("id");
        viewModel.viewSticker(id);
        $("#viewingStickerModal").modal("show");
      });

      $("#editStickerBtn").live('click', function(){
        $("#viewingStickerModal").modal("hide");
        viewModel.editSticker(viewModel.viewingSticker()._id());
        $("#editingStickerModal").modal("show");
      });

      $("#editingStickerModal .modal-body textarea").live('keyup', function(){
        $(this).trigger("change");
      });
    });
